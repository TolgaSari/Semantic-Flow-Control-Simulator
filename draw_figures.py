import numpy as np
import os
import seaborn as sns
import matplotlib.pyplot as plt
import pandas as pd
from scipy.stats.mstats import gmean

# Set up plotting parameters
plt.rcParams["figure.figsize"] = (6, 4)
plt.rcParams['pdf.fonttype'] = 42
plt.rcParams['ps.fonttype'] = 42
sns.set(font="Times New Roman", font_scale=0.75)
sns.set_style('whitegrid')
palette = sns.color_palette("crest", n_colors=4)

# Define the periods you want to plot for
periods = [50, 100]  # Periods in milliseconds

# Loop over the periods
for period_ms in periods:
    period = period_ms / 1000  # Convert milliseconds to seconds

    # Read the CSV files generated by tdoa_test.py and imu_test.py
    no_imu_file = f'no_imu_stats_{int(period_ms)}.csv'
    imu_file = f'imu_stats_{int(period_ms)}.csv'

    # Check if files exist
    if not os.path.exists(no_imu_file) or not os.path.exists(imu_file):
        print(f"CSV files for period {period_ms}ms not found. Skipping...")
        continue

    # Read data from CSV files
    no_imu_data = pd.read_csv(no_imu_file)
    imu_data = pd.read_csv(imu_file)

    # Combine the data
    combined_data = pd.concat([no_imu_data, imu_data], ignore_index=True)

    # First plot: Comparing No Filter, EWMA, Kalman (No IMU), Semantic (No IMU)
    plot_data_1 = no_imu_data.copy()
    # Filter to include only the specified cases
    cases_to_include_1 = ['No Filter', 'EWMA', 'Kalman', 'Semantic Flow']
    plot_data_1 = plot_data_1[plot_data_1['Case'].isin(cases_to_include_1)]

    # Plotting the first case
    metrics = ['Mean Error', 'Total Communication', 'Effectiveness']
    metric_labels = {
        'Mean Error': 'Localization Error (m)',
        'Total Communication': 'Total Communication Count',
        'Effectiveness': 'Communication Effectiveness (1/m/Kbits)'
    }

    for metric in metrics:
        plt.figure()

        # Plot using Seaborn
        axes = sns.barplot(
            data=plot_data_1,
            x='Time Uncertainty',
            y=metric,
            hue='Case',
            errorbar=('ci', 95),
            capsize=0.08,
            palette=palette
        )

        handles, labels = axes.get_legend_handles_labels()
        axes.legend(handles=handles[0:], labels=labels[0:])
        plt.subplots_adjust(left=0.115, right=0.940, top=0.94, bottom=0.160, hspace=0, wspace=0)

        axes.set(ylabel=metric_labels[metric], xlabel='Time Uncertainty (s)')

        # Adjust y-limits based on metric
        max_y = plot_data_1[metric].max() * 1.1
        if metric == "Effectiveness":
            max_y = 0.35
        elif metric == "Mean Error":
            max_y = 1.5
        plt.ylim(0, max_y)

        # Save the figure
        script_dir = os.path.dirname(__file__)
        results_dir = os.path.join(script_dir, 'figures/')
        if not os.path.isdir(results_dir):
            os.makedirs(results_dir)
        plt.savefig(results_dir + f'{metric}_no_imu_{period_ms}ms.pdf')
        plt.close()

        print(f"Saved plot for {metric} without IMU at period {period_ms}ms.")

    # Compute geometric means and print ratios for the first plot
    print(f"\nGeometric Mean Ratios for period {period_ms}ms (No IMU):")
    for metric in metrics:
        print(f"\nMetric: {metric}")
        data = plot_data_1[['Case', 'Time Uncertainty', metric]].copy()
        # Ensure metric values are positive
        data = data[data[metric] > 0]
        # Group by 'Case' and compute geometric mean
        geom_means = data.groupby('Case')[metric].apply(gmean)
        # Reference mean (e.g., 'No Filter')
        reference_case = 'Kalman'
        if reference_case in geom_means.index:
            ref_mean = geom_means[reference_case]
            print(f"Geometric Mean ({reference_case}): {ref_mean:.4f}")
            for case in geom_means.index:
                if case != reference_case:
                    ratio = geom_means[case] / ref_mean
                    print(f"Ratio ({case} / {reference_case}): {ratio:.4f}")
        else:
            print(f"{reference_case} not found in data.")

    # Second plot: Comparing Kalman (No IMU), Semantic (No IMU), Kalman (With IMU), Semantic (With IMU)
    plot_data_2 = imu_data.copy()

    # Filter to include only the specified cases
    cases_to_include_2 = ['Kalman', 'Semantic Flow', 'Kalman (With IMU)', 'Semantic Flow (With IMU)']
    plot_data_2 = plot_data_2[plot_data_2['Case'].isin(cases_to_include_2)]

    # Plotting the second case
    for metric in metrics:
        plt.figure()

        # Plot using Seaborn
        axes = sns.barplot(
            data=plot_data_2,
            x='Time Uncertainty',
            y=metric,
            hue='Case',
            errorbar=('ci', 95),
            capsize=0.08,
            palette=palette
        )

        handles, labels = axes.get_legend_handles_labels()
        axes.legend(handles=handles[0:], labels=labels[0:])
        plt.subplots_adjust(left=0.115, right=0.940, top=0.94, bottom=0.160, hspace=0, wspace=0)

        axes.set(ylabel=metric_labels[metric], xlabel='Time Uncertainty (s)')

        # Adjust y-limits based on metric
        max_y = plot_data_2[metric].max() * 1.1
        if metric == "Effectiveness":
            max_y = 0.35
        elif metric == "Mean Error":
            max_y = 0.60
        plt.ylim(0, max_y)

        # Save the figure
        plt.savefig(results_dir + f'{metric}_imu_comparison_{period_ms}ms.pdf')
        plt.close()

        print(f"Saved plot for {metric} comparing IMU at period {period_ms}ms.")

    # Compute geometric means and print ratios for the second plot
    print(f"\nGeometric Mean Ratios for period {period_ms}ms (With IMU):")
    for metric in metrics:
        print(f"\nMetric: {metric}")
        data = plot_data_2[['Case', 'Time Uncertainty', metric]].copy()
        # Ensure metric values are positive
        data = data[data[metric] > 0]
        # Group by 'Case' and compute geometric mean
        geom_means = data.groupby('Case')[metric].apply(gmean)
        # Reference mean (e.g., 'Kalman')
        reference_case = 'Kalman'
        if reference_case in geom_means.index:
            ref_mean = geom_means[reference_case]
            print(f"Geometric Mean ({reference_case}): {ref_mean:.4f}")
            for case in geom_means.index:
                if case != reference_case:
                    ratio = geom_means[case] / ref_mean
                    print(f"Ratio ({case} / {reference_case}): {ratio:.4f}")
        else:
            print(f"{reference_case} not found in data.")

print("All plots generated.")
